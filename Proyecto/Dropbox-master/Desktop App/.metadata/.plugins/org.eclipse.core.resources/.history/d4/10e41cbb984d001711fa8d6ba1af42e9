package Operations;

import java.nio.ByteBuffer;
import java.nio.channels.*;
import Sockets.*;
import Main.*;

public class Readable {
	
	private static SocketChannel ch;
	private static String [ ] split;
	private static ByteBuffer b;
	private static String recv;
	private static int n;

	public static void read ( ) throws Exception {
		
		ch = ( SocketChannel ) Main.k.channel ( );
		b = ByteBuffer.allocate ( 1000 );
		b.clear ( );
		n = ch.read ( b );
		b.flip ( );
		recv = new String ( b.array ( ), 0, n );
		split = recv.split ( ":" );
		
		if ( split [ 0 ].equalsIgnoreCase ( "<login>" ) ) {
			if ( Queries.logIn ( split [ 1 ], split [ 2 ] ) ) {
				Writable.logInFlag = true;
			} else {
				Writable.logInFlag = false;
			} // End if.
		} // End if.
		if ( split [ 0 ].equalsIgnoreCase ( "<signin>" ) ) {
			User u = new User ( split [ 1 ], split [ 2 ], split [ 3 ], split [ 4 ], split [ 5 ] );
			Queries.signIn ( u );
		} // End if.
		if ( split [ 0 ].equalsIgnoreCase ( "<download>" ) ) {
			sendFile.download ( Main.hm.get ( split [ 1 ] ).getServer ( ), split [ 2 ] );
		} // End if.
		if ( split [ 0 ].equalsIgnoreCase ( "<store>" ) ) {
			recvFile.recv ( Main.hm.get ( split [ 1 ] ).getServer ( ), split [ 1 ] );
		} // End if.
		if ( split [ 0 ].equalsIgnoreCase ( "<filelist>" ) ) {
			Writable.u = Main.hm.get ( split [ 1 ] );
			Writable.sendFilesFlag = true;
		} // End if.
		
	} // End method. 
	
} // End class.
